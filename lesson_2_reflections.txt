{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red36\green36\blue36;}
\margl1440\margr1440\vieww16780\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
\
1. What happens when you initialize a repository? Why do you need to do it?\
   When you use \'91git init\'92 it creates a folder for your new project that can be copied or uploaded. This\
   has to be done to indicate where the field are.\
\
2. How is the staging area different from the working directory and the repository? What value do you think\
   it offers?\
   The working area is like scratch paper. Nothing is really \'93recorded.\'94 The repository is like a \
   photograph of the files at a particular point in time.\
\
3. How can you use the staging area to make sure you have one commit per logical change?\
   In the staging area, you can see which files are there and make sure that they \'93match\'94 as far as logic \
   is concerned. You can also do \'91git diff --staged\'92 to see what kind of changes are in the staging area.\
\
4. What are some situations when branches would be helpful in keeping your history organized? How would\
   branches help?\
   Branches are good when you want to try changes that will really effect the output of the program and you\
   want to be able to go back to a particular point if need be. I guess you could also say that it would be\
   good for creating different \'91versions\'92 of the same program.\
\
5. How do the diagrams help you visualize the branch structure?\
   The diagrams were really great because it helps me understand the linear \'91parent-child\'92 relationship\
   between the elements. It also made it more clear what the \'91detached-head state\'92 is referring to.\
\
6. What is the result of merging two branches together? Why do we represent it in the diagram the way we\
   do?\
   When two branches merge, deleted lines are removed, and added lines are included (as well as those lines\
   that are unchanged).\
\
7. What are the pros and cons of Git\'92s automatic merging vs. always doing merges manually?\
   Pros: It\'92s automatic! There\'92s less checking that you have to do (I guess). Cons: Git can\'92t figure out\
   what should be kept or discarded when changes conflict, so you have to dig in and make the changes\
   yourself.\
 }